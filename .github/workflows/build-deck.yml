name: Build and Release Deck

on:
  schedule:
    - cron: '0 10 * * 0'  # Sundays at 10 AM UTC (1 hour after scout-archive)
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release name (leave empty for auto-generated)'
        required: false
        type: string
      force_build:
        description: 'Force build even if no new scout-archive release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build-deck:
    runs-on: ubuntu-latest
    steps:
    - name: Check for new scout-archive release
      id: check-release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [[ "${{ inputs.force_build }}" == "true" ]]; then
          echo "should-build=true" >> $GITHUB_OUTPUT
          echo "Force build requested - skipping release check"
          exit 0
        fi

        # Get latest scout-archive release date
        SCOUT_DATE=$(gh release list --repo dasevilla/scout-archive --limit 1 --json publishedAt --jq '.[0].publishedAt' 2>/dev/null)
        if [[ -z "$SCOUT_DATE" ]]; then
          echo "::error::No scout-archive releases found"
          exit 1
        fi

        # Get our latest deck release date (if any)
        DECK_DATE=$(gh release list --limit 1 --json publishedAt --jq '.[0].publishedAt' 2>/dev/null || echo "1970-01-01T00:00:00Z")

        echo "Scout archive latest: $SCOUT_DATE"
        echo "Deck latest: $DECK_DATE"

        if [[ "$SCOUT_DATE" > "$DECK_DATE" ]]; then
          echo "should-build=true" >> $GITHUB_OUTPUT
          echo "✅ New scout-archive release found - building deck"
        else
          echo "should-build=false" >> $GITHUB_OUTPUT
          echo "⏭️ No new scout-archive release - skipping build"
        fi

    - name: Checkout repository
      if: steps.check-release.outputs.should-build == 'true'
      uses: actions/checkout@v4

    - name: Install uv
      if: steps.check-release.outputs.should-build == 'true'
      uses: astral-sh/setup-uv@v6
      with:
        python-version: "3.12"
        enable-cache: true

    - name: Install dependencies
      if: steps.check-release.outputs.should-build == 'true'
      run: uv sync

    - name: Build Anki deck
      if: steps.check-release.outputs.should-build == 'true'
      run: make fetch-and-build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Get deck info
      if: steps.check-release.outputs.should-build == 'true'
      id: deck-info
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        DECK_FILE=$(ls *.apkg | head -1)
        echo "deck-file=$DECK_FILE" >> $GITHUB_OUTPUT

        DECK_SIZE=$(du -h "$DECK_FILE" | cut -f1)
        echo "deck-size=$DECK_SIZE" >> $GITHUB_OUTPUT

        SCOUT_TAG=$(gh release list --repo dasevilla/scout-archive --limit 1 --json tagName --jq '.[0].tagName')
        echo "scout-tag=$SCOUT_TAG" >> $GITHUB_OUTPUT

        DATE=$(date +%Y-%m-%d)
        RELEASE_TAG="deck-$DATE-$GITHUB_RUN_NUMBER-$GITHUB_RUN_ATTEMPT"
        echo "release-tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

        GENERATED_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        echo "generated-date=$GENERATED_DATE" >> $GITHUB_OUTPUT

        if [ -n "${{ inputs.release_name }}" ]; then
          RELEASE_NAME="${{ inputs.release_name }}"
        else
          if [ "$GITHUB_RUN_ATTEMPT" = "1" ]; then
            RELEASE_NAME="Merit Badge Deck - $DATE (Build $GITHUB_RUN_NUMBER)"
          else
            RELEASE_NAME="Merit Badge Deck - $DATE (Build $GITHUB_RUN_NUMBER, Attempt $GITHUB_RUN_ATTEMPT)"
          fi
        fi
        echo "release-name=$RELEASE_NAME" >> $GITHUB_OUTPUT

    - name: Upload deck artifact
      if: steps.check-release.outputs.should-build == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: anki-deck
        path: "*.apkg"

    - name: Create Release
      if: steps.check-release.outputs.should-build == 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.deck-info.outputs.release-tag }}
        name: ${{ steps.deck-info.outputs.release-name }}
        body: |
          ## Merit Badge Anki Deck

          This release contains an Anki deck for learning Scouting America merit badges by image.

          ### Details
          - **Deck file**: `${{ steps.deck-info.outputs.deck-file }}`
          - **File size**: ${{ steps.deck-info.outputs.deck-size }}
          - **Source data**: [scout-archive/${{ steps.deck-info.outputs.scout-tag }}](https://github.com/dasevilla/scout-archive/releases/tag/${{ steps.deck-info.outputs.scout-tag }})
          - **Generated**: ${{ steps.deck-info.outputs.generated-date }}

          ### How to Use
          1. Download the `.apkg` file below
          2. Open Anki on your device
          3. Go to File → Import
          4. Select the downloaded `.apkg` file
          5. The deck will be imported and ready to study!

          ### What's Included
          - Merit badge images on the front of cards
          - Badge names and descriptions on the back
          - Stable card IDs to prevent duplicates when reimporting

          Generated automatically from the [scout-merit-badges-anki](https://github.com/dasevilla/scout-merit-badges-anki) project.
        files: |
          *.apkg
        draft: false
        prerelease: false
